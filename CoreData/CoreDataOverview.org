* Core Data概述 [1]

Core Data 可能是在 OS X 和 iOS 的类库中最容易被误解的了。为了帮助读者了解它，我们会快速的过一遍相关知识，让你对它是什么有一个大概的了解，因为对 Core Data 概念的正确把握是正确运用 Core Data 的必要条件，几乎所有的在使用 Core Data 过程中遇到的挫折都与对下面两个问题的错误理解有关：它是做什么的、它是如何工作的。那么，我们就开始吧

** Core Data 是什么？

2005年4月份，苹果公司发布了 OS X 10.4，第一版支持 Core Data 的 OS X，那时 YouTube 才刚刚成立。

Core Data 是一项模型（model）层的技术，它帮助你建立一个模型来表示你的 app 的状态；Core Data 同时也是一项持久层的技术，它会把模型对象的状态持久化存储到硬盘上；但最重要的，Core Data 不仅仅是一个存取数据的类库，它同时也会维护数据在内存中的读写。

它不仅仅是一套ORM，也不仅仅是一层对 SQL 的封装，尽管它默认使用 SQL：它是一层更高层次的抽象。如果你想把 Core Data 当做 ORM 或者对 SQL 的封装，那么 Core Data 不适合你。

Core Data 最强大的地方是它对属于它的对象的管理机制，这也是你需要掌握的地方。只有掌握了它，才能把 Core Data 的强大作用真正运用到实践中去。

还有一点，Core Data 是一个独立于任何 UI 层面类库的，它在一开始就被定位在一个纯净的模型层面的类库的位置，在 OS X 上，它很重要，甚至能被使用在后台的守护进程中。

** 栈结构
在 Core Data 中有许多组成部分，这是一种很灵活的结构，在大多数的场景中，这种设置方式是相对简单的。我们把这些组成部分统称为 Core Data 的栈结构。

在这个栈中，一共有两个主要的部分——一部分是关于内存对象管理的，你应该非常熟悉而且已经了解如何使用了；另一部分是关于持久存储的，这部分把内存模型对象持久化保存起来，也负责从持久化文件中恢复出这些内存对象的状态。在这两部分之间，也就是栈结构的中间，是持久化存储控制器（PSC：Persistent Store Coordinator），扮演一个审查员的角色。它把内存对象管理和持久化存储绑定在一起，这两部分可以通过这个审查员来进行通信。

[[images/01.png]]

你的模型层逻辑代码一般与内存对象管理部分打交道。每一个模型对象都会有一个上下文环境，在大多数的场景中，所有的模型对象都共享同一个上下文环境；当然在高级场景中，也可能会有几个上下文环境。需要注意的是，每个上下文环境彼此之间是不同的，我们会在后面有更多的介绍。每一个模型对象都绑定在一个上下文环境中，每个上下文环境也知道它所管理的所有模型对象，这是要注意的很重要的一点。

当 Core Data 要从文件系统读写数据时，Core Data 堆栈结构的另一部分持久层就要起作用了。几乎在所有的场景中，PSC 都与一个持久化存储相关联，而且这个持久化存储通常是 SQLite 数据库。同样，对于一些高级场景，Core Data 也可能有把 PSC 与几种除开 SQL 以外的持久化存储相关联。

最常见的结构通常如下图所示：

[[images/02.png]]


** 各个部分是如何一起工作的
让我们快速的通过一个栗子来过一遍各部分之间是如何协同工作的。在[[SimpleButCompleteApplication.org][这篇文章]]中会讨论一个使用 Core Data 的完整的应用，文章中的栗子里有会用到一个实体——一个拥有一个 title 字段的实体，每一项都有子项，这样我们就建立了一个父子关系——这就是我们的数据模型。

正如我们在[[DataModelsAndModelObjects.org][Data Model 和 Model Object]]中提到的，在 Core Data 中，一类内存对象统称为一种实体。在文章中的栗子里，我们只有一种实体：Item 实体，这种实体是 NSManagedObject 的子类。Item 实体会映射到 Item 类，这种机制在文章中会详细阐述。

我们的应用有一个根 item，它并没有什么特殊的地方，只不过是我们用来显示 Item 层次结构的一个 item，一个我们从来不会给它设置父 item 的 item。

当我们的应用启动时，我们会按照上面的图示设置好我们的 Core Data 栈结构——一个持久化存储、一个内存对象上下文和一个用于两部分通信的 PSC。

当应用第一次启动时，并没有任何的 item，我们第一件要做的事情就是创建一个根 item，你可以通过把它插入到上下文中的方式来管理这些对象。

** 创建对象

你可以用 NSEntityDescription 的这个方法创建对象：

# BEGIN_SRC objective-c
+ (id) insertNewObjectForEntityForName:(NSString *)entityName
                inManagedObjectContext:(NSManagedObjectContext *)context
# END_SRC
它看起来有点儿笨重。我们另外建议你给你的模型类添加两个额外的方法：

# BEGIN_SRC objective-c
+ (NSString *)entityName
{
    return @"Item";
}

+ (instanceType)insertNewObjectInManagedObjectContext:(NSManagedObjectContext *)moc
{
    return [NSEntityDescription insertNewObjectForEntityForName:[self entityName]
                                         inManagedObjectContext:moc];
# END_SRC

现在，我们可以通过下面的方法插入一个根 item：

# BEGIN_SRC objective-c
Item *rootItem = [Item insertNewObjectInManagedObjectContext:managedObjectContext];
# END_SRC

目前我们在上下文中只有一个 item，上下文知道这个新插入的 item 这个根 item 也知道这个上下文（它有一个 -managedObjectContext 的方法）。

* Footnotes

[1] 原文链接：http://www.objc.io/issue-4/core-data-overview.html
